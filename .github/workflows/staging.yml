name: Staging

on:
  push:
    branches:
      - develop

jobs:

  build:
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@releases/v1
        id: deployment
        with:
          environment: staging
          initial_status: "pending"
          target_url: ${{ secrets.STAGING_URL }}
          token: "${{ github.token }}"

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            **/.cache
            node_modules
          key: ${{ runner.os }}-node12-${{ hashFiles('package-lock.json') }}

      - name: NPM Install
        run: npm ci

      - name: NPM Build
        run: npm run build

      - name: Upload Artifacts - Build
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: public

  cypress:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        browser: [ chrome, edge, firefox ]
        exclude:  # TODO: Once edge has properly been released for Linux this can be removed.
          - os: ubuntu-latest
            browser: edge
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            .cache
            node_modules
          key: ${{ runner.os }}-node12-${{ hashFiles('package-lock.json') }}

      - name: Download Artifacts - Build
        uses: actions/download-artifact@v2
        with:
          name: build
          path: public

      - name: Cypress
        uses: cypress-io/github-action@v2
        with:
          install-command: npm install
          browser: ${{ matrix.browser }}
          start: npm run serve
          wait-on: http://localhost:8000

      - name: Upload Artifacts - Cypress Evidence
        uses: actions/upload-artifact@v2
        with:
          name: cypress-${{ matrix.os }}-${{ matrix.browser }}
          path: |
            cypress/screenshots
            cypress/videos

      - name: Update Deployment Status (Failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          deployment_id: ${{ needs.build.outputs.deployment_id }}
          target_url: ${{ secrets.STAGING_URL }}
          state: "failure"
          token: "${{ github.token }}"

  deploy:
    runs-on: ubuntu-latest
    needs: [ build, cypress ]
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download Artifacts - Build
        uses: actions/download-artifact@v2
        with:
          name: build
          path: public

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Deployment Status (In Progress)
        uses: chrnorm/deployment-status@releases/v1
        with:
          deployment_id: ${{ needs.build.outputs.deployment_id }}
          target_url: ${{ secrets.STAGING_URL }}
          state: "in_progress"
          token: "${{ github.token }}"

      - name: Upload Build to S3
        run: aws s3 sync public s3://${{ secrets.STAGING_AWS_BUCKET }} --delete --metadata Header-X-Robots-Tag=none;

      - name: Create CloudFront Invalidation
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

      - name: Purge Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@v0.3.0
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

      - name: Update Deployment Status (Success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          deployment_id: ${{ needs.build.outputs.deployment_id }}
          environment_url: ${{ secrets.STAGING_URL }}
          target_url: ${{ secrets.STAGING_URL }}
          state: "success"
          token: "${{ github.token }}"

      - name: Update Deployment Status (Failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          deployment_id: ${{ needs.build.outputs.deployment_id }}
          target_url: ${{ secrets.STAGING_URL }}
          state: "failure"
          token: "${{ github.token }}"
